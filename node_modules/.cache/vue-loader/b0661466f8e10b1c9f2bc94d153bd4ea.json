{"remainingRequest":"/Users/xieronghuo/jnd-demo/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/xieronghuo/jnd-demo/node_modules/view-design/src/components/table/table.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/xieronghuo/jnd-demo/node_modules/view-design/src/components/table/table.vue","mtime":1602570644000},{"path":"/Users/xieronghuo/jnd-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xieronghuo/jnd-demo/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/xieronghuo/jnd-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/xieronghuo/jnd-demo/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["table.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"table.vue","sourceRoot":"node_modules/view-design/src/components/table","sourcesContent":["<template>\n    <div :class=\"wrapClasses\" :style=\"styles\" ref=\"tableWrap\">\n        <div :class=\"classes\">\n            <div :class=\"[prefixCls + '-title']\" v-if=\"showSlotHeader\" ref=\"title\"><slot name=\"header\"></slot></div>\n            <div :class=\"[prefixCls + '-header']\" v-if=\"showHeader\" ref=\"header\" @mousewheel=\"handleMouseWheel\">\n                <table-head\n                    :prefix-cls=\"prefixCls\"\n                    :styleObject=\"tableHeaderStyle\"\n                    :columns=\"cloneColumns\"\n                    :column-rows=\"columnRows\"\n                    :obj-data=\"objData\"\n                    :columns-width=\"columnsWidth\"\n                    :data=\"rebuildData\"></table-head>\n            </div>\n            <div :class=\"[prefixCls + '-body']\" :style=\"bodyStyle\" ref=\"body\" @scroll=\"handleBodyScroll\"\n                v-show=\"!((!!localeNoDataText && (!data || data.length === 0)) || (!!localeNoFilteredDataText && (!rebuildData || rebuildData.length === 0)))\">\n                <table-body\n                    ref=\"tbody\"\n                    :draggable=\"draggable\"\n                    :prefix-cls=\"prefixCls\"\n                    :styleObject=\"tableStyle\"\n                    :columns=\"cloneColumns\"\n                    :data=\"rebuildData\"\n                    :row-key=\"rowKey\"\n                    :columns-width=\"columnsWidth\"\n                    :obj-data=\"objData\"></table-body>\n            </div>\n            <table-summary\n                v-if=\"showSummary && (data && data.length)\"\n                ref=\"summary\"\n                :prefix-cls=\"prefixCls\"\n                :styleObject=\"tableStyle\"\n                :columns=\"cloneColumns\"\n                :data=\"summaryData\"\n                :columns-width=\"columnsWidth\"\n            />\n            <div\n                :class=\"[prefixCls + '-tip']\" :style=\"bodyStyle\" @scroll=\"handleBodyScroll\"\n                v-show=\"((!!localeNoDataText && (!data || data.length === 0)) || (!!localeNoFilteredDataText && (!rebuildData || rebuildData.length === 0)))\">\n                <table cellspacing=\"0\" cellpadding=\"0\" border=\"0\">\n                    <tbody>\n                        <tr>\n                            <td :style=\"{'height':bodyStyle.height,'width':`${this.headerWidth}px`}\">\n                                <span v-html=\"localeNoDataText\" v-if=\"!data || data.length === 0\"></span>\n                                <span v-html=\"localeNoFilteredDataText\" v-else></span>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <div :class=\"[prefixCls + '-fixed']\" :style=\"fixedTableStyle\" v-if=\"isLeftFixed\">\n                <div :class=\"fixedHeaderClasses\" v-if=\"showHeader\">\n                    <table-head\n                        fixed=\"left\"\n                        :prefix-cls=\"prefixCls\"\n                        :styleObject=\"fixedTableStyle\"\n                        :columns=\"leftFixedColumns\"\n                        :column-rows=\"columnRows\"\n                        :fixed-column-rows=\"leftFixedColumnRows\"\n                        :obj-data=\"objData\"\n                        :columns-width=\"columnsWidth\"\n                        :data=\"rebuildData\"></table-head>\n                </div>\n                <div :class=\"[prefixCls + '-fixed-body']\" :style=\"fixedBodyStyle\" ref=\"fixedBody\" @mousewheel=\"handleFixedMousewheel\" @DOMMouseScroll=\"handleFixedMousewheel\">\n                    <table-body\n                        fixed=\"left\"\n                        :draggable=\"draggable\"\n                        :prefix-cls=\"prefixCls\"\n                        :styleObject=\"fixedTableStyle\"\n                        :columns=\"leftFixedColumns\"\n                        :data=\"rebuildData\"\n                        :row-key=\"rowKey\"\n                        :columns-width=\"columnsWidth\"\n                        :obj-data=\"objData\"></table-body>\n                </div>\n                <table-summary\n                    v-if=\"showSummary && (data && data.length)\"\n                    fixed=\"left\"\n                    :prefix-cls=\"prefixCls\"\n                    :styleObject=\"fixedTableStyle\"\n                    :columns=\"leftFixedColumns\"\n                    :data=\"summaryData\"\n                    :columns-width=\"columnsWidth\"\n                    :style=\"{ 'margin-top': showHorizontalScrollBar ? scrollBarWidth + 'px' : 0 }\"\n                />\n            </div>\n            <div :class=\"[prefixCls + '-fixed-right']\" :style=\"fixedRightTableStyle\" v-if=\"isRightFixed\">\n                <div :class=\"fixedHeaderClasses\" v-if=\"showHeader\">\n                    <table-head\n                        fixed=\"right\"\n                        :prefix-cls=\"prefixCls\"\n                        :styleObject=\"fixedRightTableStyle\"\n                        :columns=\"rightFixedColumns\"\n                        :column-rows=\"columnRows\"\n                        :fixed-column-rows=\"rightFixedColumnRows\"\n                        :obj-data=\"objData\"\n                        :columns-width=\"columnsWidth\"\n                        :data=\"rebuildData\"></table-head>\n                </div>\n                <div :class=\"[prefixCls + '-fixed-body']\" :style=\"fixedBodyStyle\" ref=\"fixedRightBody\" @mousewheel=\"handleFixedMousewheel\" @DOMMouseScroll=\"handleFixedMousewheel\">\n                    <table-body\n                        fixed=\"right\"\n                        :draggable=\"draggable\"\n                        :prefix-cls=\"prefixCls\"\n                        :styleObject=\"fixedRightTableStyle\"\n                        :columns=\"rightFixedColumns\"\n                        :data=\"rebuildData\"\n                        :row-key=\"rowKey\"\n                        :columns-width=\"columnsWidth\"\n                        :obj-data=\"objData\"></table-body>\n                </div>\n                <table-summary\n                    v-if=\"showSummary && (data && data.length)\"\n                    fixed=\"right\"\n                    :prefix-cls=\"prefixCls\"\n                    :styleObject=\"fixedRightTableStyle\"\n                    :columns=\"rightFixedColumns\"\n                    :data=\"summaryData\"\n                    :columns-width=\"columnsWidth\"\n                    :style=\"{ 'margin-top': showHorizontalScrollBar ? scrollBarWidth + 'px' : 0 }\"\n                />\n            </div>\n            <div :class=\"[prefixCls + '-fixed-right-header']\" :style=\"fixedRightHeaderStyle\" v-if=\"isRightFixed\"></div>\n            <div :class=\"[prefixCls + '-footer']\" v-if=\"showSlotFooter\" ref=\"footer\"><slot name=\"footer\"></slot></div>\n        </div>\n        <div class=\"ivu-table-resize-line\" v-show=\"showResizeLine\" ref=\"resizeLine\"></div>\n        <div class=\"ivu-table-context-menu\" :style=\"contextMenuStyles\" v-if=\"showContextMenu\">\n            <Dropdown trigger=\"custom\" :visible=\"contextMenuVisible\" transfer @on-clickoutside=\"handleClickContextMenuOutside\">\n                <DropdownMenu slot=\"list\">\n                    <slot name=\"contextMenu\"></slot>\n                </DropdownMenu>\n            </Dropdown>\n        </div>\n        <Spin fix size=\"large\" v-if=\"loading\">\n            <slot name=\"loading\"></slot>\n        </Spin>\n    </div>\n</template>\n<script>\n    import tableHead from './table-head.vue';\n    import tableBody from './table-body.vue';\n    import tableSummary from './summary.vue';\n    import Dropdown from '../dropdown/dropdown.vue';\n    import DropdownMenu from '../dropdown/dropdown-menu.vue';\n    import Spin from '../spin/spin.vue';\n    import { oneOf, getStyle, deepCopy, getScrollBarSize } from '../../utils/assist';\n    import { on, off } from '../../utils/dom';\n    import Csv from '../../utils/csv';\n    import ExportCsv from './export-csv';\n    import Locale from '../../mixins/locale';\n    import elementResizeDetectorMaker from 'element-resize-detector';\n    import { getAllColumns, convertToRows, convertColumnOrder, getRandomStr } from './util';\n\n    const prefixCls = 'ivu-table';\n\n    let rowKey = 1;\n    let columnKey = 1;\n\n    export default {\n        name: 'Table',\n        mixins: [ Locale ],\n        components: { tableHead, tableBody, tableSummary, Spin, Dropdown, DropdownMenu },\n        provide () {\n            return {\n                tableRoot: this\n            };\n        },\n        props: {\n            data: {\n                type: Array,\n                default () {\n                    return [];\n                }\n            },\n            columns: {\n                type: Array,\n                default () {\n                    return [];\n                }\n            },\n            size: {\n                validator (value) {\n                    return oneOf(value, ['small', 'large', 'default']);\n                },\n                default () {\n                    return !this.$IVIEW || this.$IVIEW.size === '' ? 'default' : this.$IVIEW.size;\n                }\n            },\n            width: {\n                type: [Number, String]\n            },\n            height: {\n                type: [Number, String]\n            },\n            // 3.4.0\n            maxHeight: {\n                type: [Number, String]\n            },\n            stripe: {\n                type: Boolean,\n                default: false\n            },\n            border: {\n                type: Boolean,\n                default: false\n            },\n            showHeader: {\n                type: Boolean,\n                default: true\n            },\n            highlightRow: {\n                type: Boolean,\n                default: false\n            },\n            rowClassName: {\n                type: Function,\n                default () {\n                    return '';\n                }\n            },\n            context: {\n                type: Object\n            },\n            noDataText: {\n                type: String\n            },\n            noFilteredDataText: {\n                type: String\n            },\n            disabledHover: {\n                type: Boolean\n            },\n            loading: {\n                type: Boolean,\n                default: false\n            },\n            draggable: {\n                type: Boolean,\n                default: false\n            },\n            tooltipTheme: {\n                validator (value) {\n                    return oneOf(value, ['dark', 'light']);\n                },\n                default: 'dark'\n            },\n            // #5380 开启后，:key 强制更新，否则使用 index\n            // 4.1 开始支持 String，指定具体字段\n            rowKey: {\n                type: [Boolean, String],\n                default: false\n            },\n            // 4.0.0\n            spanMethod: {\n                type: Function\n            },\n            // 4.0.0\n            showSummary: {\n                type: Boolean,\n                default: false\n            },\n            // 4.0.0\n            summaryMethod: {\n                type: Function\n            },\n            // 4.0.0\n            sumText: {\n                type: String\n            },\n            // 4.1.0\n            indentSize: {\n                type: Number,\n                default: 16\n            },\n            // 4.1.0\n            loadData: {\n                type: Function\n            },\n            // 4.4.0\n            updateShowChildren: {\n                type: Boolean,\n                default: false\n            },\n            // 4.1.0\n            contextMenu: {\n                type: Boolean,\n                default: false\n            },\n            // 4.2.0\n            showContextMenu: {\n                type: Boolean,\n                default: false\n            }\n        },\n        data () {\n            const colsWithId = this.makeColumnsId(this.columns);\n            return {\n                ready: false,\n                tableWidth: 0,\n                columnsWidth: {},\n                prefixCls: prefixCls,\n                compiledUids: [],\n                objData: this.makeObjData(),     // checkbox or highlight-row\n                rebuildData: [],    // for sort or filter\n                cloneColumns: this.makeColumns(colsWithId),\n                columnRows: this.makeColumnRows(false, colsWithId),\n                leftFixedColumnRows: this.makeColumnRows('left', colsWithId),\n                rightFixedColumnRows: this.makeColumnRows('right', colsWithId),\n                allColumns: getAllColumns(colsWithId),  // for multiple table-head, get columns that have no children\n                showSlotHeader: true,\n                showSlotFooter: true,\n                bodyHeight: 0,\n                scrollBarWidth: getScrollBarSize(),\n                currentContext: this.context,\n                cloneData: deepCopy(this.data),    // when Cell has a button to delete row data, clickCurrentRow will throw an error, so clone a data\n                showVerticalScrollBar:false,\n                showHorizontalScrollBar:false,\n                headerWidth:0,\n                headerHeight:0,\n                showResizeLine: false,\n                contextMenuVisible: false,\n                contextMenuStyles: {\n                    top: 0,\n                    left: 0\n                }\n            };\n        },\n        computed: {\n            localeNoDataText () {\n                if (this.noDataText === undefined) {\n                    return this.t('i.table.noDataText');\n                } else {\n                    return this.noDataText;\n                }\n            },\n            localeNoFilteredDataText () {\n                if (this.noFilteredDataText === undefined) {\n                    return this.t('i.table.noFilteredDataText');\n                } else {\n                    return this.noFilteredDataText;\n                }\n            },\n            localeSumText () {\n                if (this.sumText === undefined) {\n                    return this.t('i.table.sumText');\n                } else {\n                    return this.sumText;\n                }\n            },\n            wrapClasses () {\n                return [\n                    `${prefixCls}-wrapper`,\n                    {\n                        [`${prefixCls}-hide`]: !this.ready,\n                        [`${prefixCls}-with-header`]: this.showSlotHeader,\n                        [`${prefixCls}-with-footer`]: this.showSlotFooter,\n                        [`${prefixCls}-with-summary`]: this.showSummary,\n                        [`${prefixCls}-wrapper-with-border`]: this.border\n                    }\n                ];\n            },\n            classes () {\n                return [\n                    `${prefixCls}`,\n                    {\n                        [`${prefixCls}-${this.size}`]: !!this.size,\n                        [`${prefixCls}-border`]: this.border,\n                        [`${prefixCls}-stripe`]: this.stripe,\n                        [`${prefixCls}-with-fixed-top`]: !!this.height\n                    }\n                ];\n            },\n            fixedHeaderClasses () {\n                return [\n                    `${prefixCls}-fixed-header`,\n                    {\n                        [`${prefixCls}-fixed-header-with-empty`]: !this.rebuildData.length\n                    }\n                ];\n            },\n            styles () {\n                let style = {};\n                let summaryHeight = 0;\n                if (this.showSummary) {\n                    if (this.size === 'small') summaryHeight = 40;\n                    else if (this.size === 'large') summaryHeight = 60;\n                    else summaryHeight = 48;\n                }\n                if (this.height) {\n                    let height = parseInt(this.height) + summaryHeight;\n                    style.height = `${height}px`;\n                }\n                if (this.maxHeight) {\n                    const maxHeight = parseInt(this.maxHeight) + summaryHeight;\n                    style.maxHeight = `${maxHeight}px`;\n                }\n                if (this.width) style.width = `${this.width}px`;\n                return style;\n            },\n            tableStyle () {\n                let style = {};\n                if (this.tableWidth !== 0) {\n                    let width = '';\n                    if (this.bodyHeight === 0) {\n                        width = this.tableWidth;\n                    } else {\n                        width = this.tableWidth - (this.showVerticalScrollBar?this.scrollBarWidth:0);\n                    }\n//                    const width = this.bodyHeight === 0 ? this.tableWidth : this.tableWidth - this.scrollBarWidth;\n                    style.width = `${width}px`;\n                }\n                return style;\n            },\n            tableHeaderStyle () {\n                let style = {};\n                if (this.tableWidth !== 0) {\n                    let width = '';\n                    width = this.tableWidth;\n                    style.width = `${width}px`;\n                }\n                return style;\n            },\n            fixedTableStyle () {\n                let style = {};\n                let width = 0;\n                this.leftFixedColumns.forEach((col) => {\n                    if (col.fixed && col.fixed === 'left') width += col._width;\n                });\n                style.width = `${width}px`;\n                return style;\n            },\n            fixedRightTableStyle () {\n                let style = {};\n                let width = 0;\n                this.rightFixedColumns.forEach((col) => {\n                    if (col.fixed && col.fixed === 'right') width += col._width;\n                });\n                //width += this.scrollBarWidth;\n                style.width = `${width}px`;\n                style.right = `${this.showVerticalScrollBar?this.scrollBarWidth:0}px`;\n                return style;\n            },\n            fixedRightHeaderStyle () {\n                let style = {};\n                let width = 0;\n                let height = this.headerHeight+1;\n                if(this.showVerticalScrollBar){\n                    width = this.scrollBarWidth;\n                }\n                style.width = `${width}px`;\n                style.height = `${height}px`;\n                return style;\n            },\n            bodyStyle () {\n                let style = {};\n                if (this.bodyHeight !== 0) {\n                    const height = this.bodyHeight;\n                    if (this.height) {\n                        style.height = `${height}px`;\n                    } else if (this.maxHeight) {\n                        style.maxHeight = `${height}px`;\n                    }\n                }\n                return style;\n            },\n            fixedBodyStyle () {\n                let style = {};\n                if (this.bodyHeight !== 0) {\n                    let height = this.bodyHeight - (this.showHorizontalScrollBar?this.scrollBarWidth:0);\n                    style.height = this.showHorizontalScrollBar ? `${height}px` : `${height - 1}px`;\n                }\n                return style;\n            },\n            leftFixedColumns () {\n                return convertColumnOrder(this.cloneColumns, 'left');\n            },\n            rightFixedColumns () {\n                return convertColumnOrder(this.cloneColumns, 'right');\n            },\n            isLeftFixed () {\n                return this.columns.some(col => col.fixed && col.fixed === 'left');\n            },\n            isRightFixed () {\n                return this.columns.some(col => col.fixed && col.fixed === 'right');\n            },\n            // for summary data\n            summaryData () {\n                if (!this.showSummary) return {};\n\n                let sums = {};\n                if (this.summaryMethod) {\n                    sums = this.summaryMethod({ columns: this.cloneColumns, data: this.rebuildData });\n                } else {\n                    this.cloneColumns.forEach((column, index) => {\n                        const key = column.key;\n                        if (index === 0) {\n                            sums[key] = {\n                                key: column.key,\n                                value: this.localeSumText\n                            };\n                            return;\n                        }\n                        const values = this.rebuildData.map(item => Number(item[column.key]));\n                        const precisions = [];\n                        let notNumber = true;\n                        values.forEach(value => {\n                            if (!isNaN(value)) {\n                                notNumber = false;\n                                let decimal = ('' + value).split('.')[1];\n                                precisions.push(decimal ? decimal.length : 0);\n                            }\n                        });\n                        const precision = Math.max.apply(null, precisions);\n                        if (!notNumber) {\n                            const currentValue = values.reduce((prev, curr) => {\n                                const value = Number(curr);\n                                if (!isNaN(value)) {\n                                    return parseFloat((prev + curr).toFixed(Math.min(precision, 20)));\n                                } else {\n                                    return prev;\n                                }\n                            }, 0);\n                            sums[key] = {\n                                key: column.key,\n                                value: currentValue\n                            };\n                        } else {\n                            sums[key] = {\n                                key: column.key,\n                                value: ''\n                            };\n                        }\n                    });\n                }\n\n                return sums;\n            }\n        },\n        methods: {\n            rowClsName (index) {\n                return this.rowClassName(this.data[index], index);\n            },\n            handleResize () {\n                    //let tableWidth = parseInt(getStyle(this.$el, 'width')) - 1;\n                let tableWidth = this.$el.offsetWidth - 1;\n                let columnsWidth = {};\n                let sumMinWidth = 0;\n                let hasWidthColumns = [];\n                let noWidthColumns = [];\n                let maxWidthColumns = [];\n                let noMaxWidthColumns = [];\n                this.cloneColumns.forEach((col) => {\n                    if (col.width) {\n                        hasWidthColumns.push(col);\n                    }\n                    else{\n                        noWidthColumns.push(col);\n                        if (col.minWidth) {\n                            sumMinWidth += col.minWidth;\n                        }\n                        if (col.maxWidth) {\n                            maxWidthColumns.push(col);\n                        }\n                        else {\n                            noMaxWidthColumns.push(col);\n                        }\n                    }\n                    col._width = null;\n                });\n\n\n                let unUsableWidth = hasWidthColumns.map(cell => cell.width).reduce((a, b) => a + b, 0);\n                let usableWidth = tableWidth - unUsableWidth - sumMinWidth - (this.showVerticalScrollBar?this.scrollBarWidth:0) - 1;\n                let usableLength = noWidthColumns.length;\n                let columnWidth = 0;\n                if(usableWidth > 0 && usableLength > 0){\n                    columnWidth = parseInt(usableWidth / usableLength);\n                }\n\n\n                for (let i = 0; i < this.cloneColumns.length; i++) {\n                    const column = this.cloneColumns[i];\n                    let width = columnWidth + (column.minWidth?column.minWidth:0);\n                    if(column.width){\n                        width = column.width;\n                    }\n                    else{\n                        if (column._width) {\n                            width = column._width;\n                        }\n                        else {\n                            if (column.minWidth > width){\n                                width = column.minWidth;\n                            }\n                            else if (column.maxWidth < width){\n                                width = column.maxWidth;\n                            }\n\n                            if (usableWidth>0) {\n                                usableWidth -= width - (column.minWidth?column.minWidth:0);\n                                usableLength--;\n                                if (usableLength > 0) {\n                                    columnWidth = parseInt(usableWidth / usableLength);\n                                }\n                                else {\n                                    columnWidth = 0;\n                                }\n                            }\n                            else{\n                                columnWidth = 0;\n                            }\n                        }\n                    }\n\n                    column._width = width;\n\n                    columnsWidth[column._index] = {\n                        width: width\n                    };\n\n                }\n                if(usableWidth>0) {\n                    usableLength = noMaxWidthColumns.length;\n                    columnWidth = parseInt(usableWidth / usableLength);\n                    for (let i = 0; i < noMaxWidthColumns.length; i++) {\n                        const column = noMaxWidthColumns[i];\n                        let width = column._width + columnWidth;\n                        if (usableLength > 1) {\n                            usableLength--;\n                            usableWidth -= columnWidth;\n                            columnWidth = parseInt(usableWidth / usableLength);\n                        }\n                        else {\n                            columnWidth = 0;\n                        }\n\n                        column._width = width;\n\n                        columnsWidth[column._index] = {\n                            width: width\n                        };\n\n                    }\n                }\n\n                this.tableWidth = this.cloneColumns.map(cell => cell._width).reduce((a, b) => a + b, 0) + (this.showVerticalScrollBar?this.scrollBarWidth:0) + 1;\n                this.columnsWidth = columnsWidth;\n                this.fixedHeader();\n            },\n            handleMouseIn (_index, rowKey) {\n                if (this.disabledHover) return;\n                const objData = rowKey ? this.getDataByRowKey(rowKey) : this.objData[_index];\n                if (objData._isHover) return;\n                objData._isHover = true;\n            },\n            handleMouseOut (_index, rowKey) {\n                if (this.disabledHover) return;\n                const objData = rowKey ? this.getDataByRowKey(rowKey) : this.objData[_index];\n                objData._isHover = false;\n            },\n            // 通用处理 highlightCurrentRow 和 clearCurrentRow\n            handleCurrentRow (type, _index, rowKey) {\n                const objData = rowKey ? this.getDataByRowKey(rowKey) : this.objData[_index];\n\n                let oldData = null;\n                let oldIndex = -1;\n\n                for (let i in this.objData) {\n                    if (this.objData[i]._isHighlight) {\n                        oldIndex = parseInt(i);\n                        this.objData[i]._isHighlight = false;\n                        break;\n                    } else if (this.objData[i].children && this.objData[i].children.length) {\n                        const resetData = this.handleResetChildrenRow(this.objData[i]);\n                        if (resetData) oldData = JSON.parse(JSON.stringify(resetData));\n                    }\n                }\n                if (type === 'highlight') objData._isHighlight = true;\n                if (oldIndex >= 0) {\n                    oldData = JSON.parse(JSON.stringify(this.cloneData[oldIndex]));\n                }\n                const newData = type === 'highlight' ? rowKey ? JSON.parse(JSON.stringify(this.getBaseDataByRowKey(rowKey))) : JSON.parse(JSON.stringify(this.cloneData[_index])) : null;\n                this.$emit('on-current-change', newData, oldData);\n            },\n            handleResetChildrenRow (objData) {\n                let data = null;\n                if (objData.children && objData.children.length) {\n                    for (let i = 0; i < objData.children.length; i++) {\n                        const item = objData.children[i];\n                        if (item._isHighlight) {\n                            item._isHighlight = false;\n                            data = item;\n                            break;\n                        } else if (item.children && item.children.length) {\n                            data = this.handleResetChildrenRow(item);\n                        }\n                    }\n                }\n                return data;\n            },\n            highlightCurrentRow (_index, rowKey) {\n                const objData = rowKey ? this.getDataByRowKey(rowKey) : this.objData[_index];\n                if (!this.highlightRow || objData._isHighlight) return;\n                this.handleCurrentRow('highlight', _index, rowKey);\n            },\n            clearCurrentRow () {\n                if (!this.highlightRow) return;\n                this.handleCurrentRow('clear');\n            },\n            clickCurrentRow (_index, rowKey) {\n                this.highlightCurrentRow (_index, rowKey);\n                if (rowKey) {\n                    this.$emit('on-row-click', JSON.parse(JSON.stringify(this.getBaseDataByRowKey(rowKey))));\n                } else {\n                    this.$emit('on-row-click', JSON.parse(JSON.stringify(this.cloneData[_index])), _index);\n                }\n            },\n            dblclickCurrentRow (_index, rowKey) {\n                this.highlightCurrentRow (_index, rowKey);\n                if (rowKey) {\n                    this.$emit('on-row-dblclick', JSON.parse(JSON.stringify(this.getBaseDataByRowKey(rowKey))));\n                } else {\n                    this.$emit('on-row-dblclick', JSON.parse(JSON.stringify(this.cloneData[_index])), _index);\n                }\n            },\n            contextmenuCurrentRow (_index, rowKey, event) {\n                if (this.contextMenuVisible) this.handleClickContextMenuOutside();\n                this.$nextTick(() => {\n                    const $TableWrap = this.$refs.tableWrap;\n                    const TableBounding = $TableWrap.getBoundingClientRect();\n                    const position = {\n                        left: `${event.clientX - TableBounding.left}px`,\n                        top: `${event.clientY - TableBounding.top}px`\n                    };\n                    this.contextMenuStyles = position;\n                    this.contextMenuVisible = true;\n                    if (rowKey) {\n                        this.$emit('on-contextmenu', JSON.parse(JSON.stringify(this.getBaseDataByRowKey(rowKey))), event, position);\n                    } else {\n                        this.$emit('on-contextmenu', JSON.parse(JSON.stringify(this.cloneData[_index])), event, position);\n                    }\n                });\n            },\n            getSelection () {\n                // 分别拿根数据和子数据的已选项\n                let selectionIndexes = [];\n                let selectionRowKeys = [];\n                for (let i in this.objData) {\n                    const objData = this.objData[i];\n                    if (objData._isChecked) selectionIndexes.push(parseInt(i));\n                    if (objData.children && objData.children.length) {\n                        selectionRowKeys = selectionRowKeys.concat(this.getSelectionChildrenRowKeys(objData, selectionRowKeys));\n                    }\n                }\n\n                // 去重的 RowKeys\n                selectionRowKeys = [...new Set(selectionRowKeys)];\n\n                let selection = [];\n\n                this.data.forEach((item, index) => {\n                    if (selectionIndexes.indexOf(index) > -1) {\n                        selection = selection.concat(item);\n                    }\n                    if (item.children && item.children.length && selectionRowKeys.length) {\n                        selection = selection.concat(this.getSelectionChildren(item, selection, selectionRowKeys));\n                    }\n                });\n\n\n                selection = [...new Set(selection)];\n                return JSON.parse(JSON.stringify(selection));\n            },\n            getSelectionChildrenRowKeys (objData, selectionRowKeys) {\n                if (objData.children && objData.children.length) {\n                    objData.children.forEach(item => {\n                        if (item._isChecked) selectionRowKeys.push(item._rowKey);\n                        if (item.children && item.children.length) {\n                            selectionRowKeys = selectionRowKeys.concat(this.getSelectionChildrenRowKeys(item, selectionRowKeys));\n                        }\n                    });\n                }\n                return selectionRowKeys;\n            },\n            getSelectionChildren (data, selection, selectionRowKeys) {\n                if (data.children && data.children.length) {\n                    data.children.forEach(item => {\n                        if (selectionRowKeys.indexOf(item[this.rowKey]) > -1) {\n                            selection = selection.concat(item);\n                        }\n                        if (item.children && item.children.length) {\n                            selection = selection.concat(this.getSelectionChildren(item, selection, selectionRowKeys));\n                        }\n                    });\n                }\n                return selection;\n            },\n            toggleSelect (_index, rowKey) {\n                let data = {};\n\n                if (rowKey) {\n                    data = this.getDataByRowKey(rowKey);\n                } else {\n                    for (let i in this.objData) {\n                        if (parseInt(i) === _index) {\n                            data = this.objData[i];\n                            break;\n                        }\n                    }\n                }\n                const status = !data._isChecked;\n\n                data._isChecked = status;\n                const selection = this.getSelection();\n                const selectedData = rowKey ? this.getBaseDataByRowKey(rowKey, this.data) : this.data[_index];\n                this.$emit(status ? 'on-select' : 'on-select-cancel', selection, JSON.parse(JSON.stringify(selectedData)));\n                this.$emit('on-selection-change', selection);\n            },\n            toggleExpand (_index) {\n                let data = {};\n\n                for (let i in this.objData) {\n                    if (parseInt(i) === _index) {\n                        data = this.objData[i];\n                        break;\n                    }\n                }\n                const status = !data._isExpanded;\n                this.objData[_index]._isExpanded = status;\n                this.$emit('on-expand', JSON.parse(JSON.stringify(this.cloneData[_index])), status);\n\n                if(this.height || this.maxHeight){\n                    this.$nextTick(()=>this.fixedBody());\n                }\n            },\n            toggleTree (rowKey) {\n                const data = this.getDataByRowKey(rowKey);\n                // async loading\n                if ('_loading' in data && data._loading) return;\n                if ('_loading' in data && !data._loading && data.children.length === 0) {\n                    const sourceData = this.getBaseDataByRowKey(rowKey, this.data);\n                    this.$set(sourceData, '_loading', true);\n                    this.loadData(sourceData, children => {\n                        this.$set(sourceData, '_loading', false);\n                        if (children.length) {\n                            this.$set(sourceData, 'children', children);\n                            this.$nextTick(() => {\n                                const newData = this.getDataByRowKey(rowKey);\n                                newData._isShowChildren = !newData._isShowChildren;\n                                // 由于 updateDataStatus 是基于原数据修改，导致单选、多选等状态重置，所以暂不处理 _showChildren 状态，而是通过事件 @on-expand-tree\n                                // 异步时，需设置 _showChildren，否则嵌套子集展开，会自动收起父级\n                                this.updateDataStatus(rowKey, '_showChildren', newData._isShowChildren);\n                            });\n                        }\n                    });\n                    return;\n                }\n\n                data._isShowChildren = !data._isShowChildren;\n                // 由于 updateDataStatus 是基于原数据修改，导致单选、多选等状态重置，所以暂不处理 _showChildren 状态，而是通过事件 @on-expand-tree\n                // #675，增加 updateShowChildren\n                if (this.updateShowChildren) this.updateDataStatus(rowKey, '_showChildren', data._isShowChildren);\n                this.$emit('on-expand-tree', rowKey, data._isShowChildren);\n            },\n            /**\n             * @description 当修改某内置属性，如 _isShowChildren 时，因当将原 data 对应 _showChildren 也修改，否则修改 data 时，状态会重置\n             * @param rowKey rowKey\n             * @param key 原数据对应的字段\n             * @param value 修改的值\n             * */\n            // todo 单选、多选等状态可能也需要更新原数据\n            updateDataStatus (rowKey, key, value) {\n                const data = this.getBaseDataByRowKey(rowKey, this.data);\n                this.$set(data, key, value);\n            },\n            getDataByRowKey (rowKey, objData = this.objData) {\n                let data = null;\n                for (let i in objData) {\n                    const thisData = objData[i];\n                    if (thisData._rowKey === rowKey) {\n                        data = thisData;\n                        break;\n                    } else if (thisData.children && thisData.children.length) {\n                        data = this.getChildrenByRowKey(rowKey, thisData);\n                        if (data) {\n                            break;\n                        }\n                    }\n                }\n                return data;\n            },\n            getChildrenByRowKey (rowKey, objData) {\n                let data = null;\n                if (objData.children && objData.children.length) {\n                    for (let i = 0; i < objData.children.length; i++) {\n                        const item = objData.children[i];\n                        if (item._rowKey === rowKey) {\n                            data = item;\n                            break;\n                        } else if (item.children && item.children.length) {\n                            data = this.getChildrenByRowKey(rowKey, item);\n                            if (data) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                return data;\n            },\n            getBaseDataByRowKey (rowKey, sourceData = this.cloneData) {\n                let data = null;\n                for (let i = 0; i < sourceData.length; i++) {\n                    const thisData = sourceData[i];\n                    if (thisData[this.rowKey] === rowKey) {\n                        data = thisData;\n                        break;\n                    } else if (thisData.children && thisData.children.length) {\n                        data = this.getChildrenDataByRowKey(rowKey, thisData);\n                        if (data && data[this.rowKey] === rowKey) return data;\n                    }\n                }\n                return data;\n            },\n            getChildrenDataByRowKey (rowKey, cloneData) {\n                let data = null;\n                if (cloneData.children && cloneData.children.length) {\n                    for (let i = 0; i < cloneData.children.length; i++) {\n                        const item = cloneData.children[i];\n                        if (item[this.rowKey] === rowKey) {\n                            data = item;\n                            break;\n                        } else if (item.children && item.children.length) {\n                            data = this.getChildrenDataByRowKey(rowKey, item);\n                            if (data) {\n                                break;\n                            }\n                        }\n                    }\n                }\n                return data;\n            },\n            selectAll (status) {\n                // this.rebuildData.forEach((data) => {\n                //     if(this.objData[data._index]._isDisabled){\n                //         this.objData[data._index]._isChecked = false;\n                //     }else{\n                //         this.objData[data._index]._isChecked = status;\n                //     }\n\n                // });\n                for (const data of this.rebuildData) {\n                    const objData = this.objData[data._index];\n                    if (!objData._isDisabled) {\n                        objData._isChecked = status;\n                    }\n                    if (data.children && data.children.length) {\n                        this.selectAllChildren(objData, status);\n                    }\n                }\n                const selection = this.getSelection();\n                if (status) {\n                    this.$emit('on-select-all', selection);\n                } else {\n                    this.$emit('on-select-all-cancel', selection);\n                }\n                this.$emit('on-selection-change', selection);\n            },\n            selectAllChildren (data, status) {\n                if (data.children && data.children.length) {\n                    data.children.map(item => {\n                        if (!item._isDisabled) {\n                            item._isChecked = status;\n                        }\n                        if (item.children && item.children.length) {\n                            this.selectAllChildren(item, status);\n                        }\n                    });\n                }\n            },\n            fixedHeader () {\n                if (this.height || this.maxHeight) {\n                    this.$nextTick(() => {\n                        const titleHeight = parseInt(getStyle(this.$refs.title, 'height')) || 0;\n                        const headerHeight = parseInt(getStyle(this.$refs.header, 'height')) || 0;\n                        const footerHeight = parseInt(getStyle(this.$refs.footer, 'height')) || 0;\n                        if (this.height) {\n                            this.bodyHeight = this.height - titleHeight - headerHeight - footerHeight;\n                        } else if (this.maxHeight) {\n                            this.bodyHeight = this.maxHeight - titleHeight - headerHeight - footerHeight;\n                        }\n                        this.$nextTick(()=>this.fixedBody());\n                    });\n                } else {\n                    this.bodyHeight = 0;\n                    this.$nextTick(()=>this.fixedBody());\n                }\n            },\n            fixedBody (){\n                if (this.$refs.header) {\n                    this.headerWidth = this.$refs.header.children[0].offsetWidth;\n                    this.headerHeight = this.$refs.header.children[0].offsetHeight;\n                    //this.showHorizontalScrollBar = this.headerWidth>this.$refs.header.offsetWidth;\n                }\n\n                if (!this.$refs.tbody || !this.data || this.data.length === 0) {\n                    this.showVerticalScrollBar = false;\n                }\n                else{\n                    let bodyContentEl = this.$refs.tbody.$el;\n                    let bodyEl = bodyContentEl.parentElement;\n                    let bodyContentHeight = bodyContentEl.offsetHeight;\n                    let bodyHeight = bodyEl.offsetHeight;\n\n                    this.showHorizontalScrollBar = bodyEl.offsetWidth < bodyContentEl.offsetWidth + (this.showVerticalScrollBar?this.scrollBarWidth:0);\n                    this.showVerticalScrollBar = this.bodyHeight? bodyHeight - (this.showHorizontalScrollBar?this.scrollBarWidth:0) < bodyContentHeight : false;\n\n                    if(this.showVerticalScrollBar){\n                        bodyEl.classList.add(this.prefixCls +'-overflowY');\n                    }else{\n                        bodyEl.classList.remove(this.prefixCls +'-overflowY');\n                    }\n                    if(this.showHorizontalScrollBar){\n                        bodyEl.classList.add(this.prefixCls +'-overflowX');\n                    }else{\n                        bodyEl.classList.remove(this.prefixCls +'-overflowX');\n                    }\n                }\n            },\n\n            hideColumnFilter () {\n                this.cloneColumns.forEach((col) => col._filterVisible = false);\n            },\n            handleBodyScroll (event) {\n                if (this.showHeader) this.$refs.header.scrollLeft = event.target.scrollLeft;\n                if (this.isLeftFixed) this.$refs.fixedBody.scrollTop = event.target.scrollTop;\n                if (this.isRightFixed) this.$refs.fixedRightBody.scrollTop = event.target.scrollTop;\n                if (this.showSummary && this.$refs.summary) this.$refs.summary.$el.scrollLeft = event.target.scrollLeft;\n                this.hideColumnFilter();\n            },\n            handleFixedMousewheel(event) {\n                let deltaY = event.deltaY;\n                if(!deltaY && event.detail){\n                    deltaY = event.detail * 40;\n                }\n                if(!deltaY && event.wheelDeltaY){\n                    deltaY = -event.wheelDeltaY;\n                }\n                if(!deltaY && event.wheelDelta){\n                    deltaY = -event.wheelDelta;\n                }\n                if(!deltaY) return;\n                const body = this.$refs.body;\n                const currentScrollTop = body.scrollTop;\n                if (deltaY < 0 && currentScrollTop !== 0) {\n                    event.preventDefault();\n                }\n                if (deltaY > 0 && body.scrollHeight - body.clientHeight > currentScrollTop) {\n                    event.preventDefault();\n                }\n                //body.scrollTop += deltaY;\n                let step = 0;\n                let timeId = setInterval(()=>{\n                    step += 5;\n                    if(deltaY>0){\n                        body.scrollTop += 2;\n                    }\n                    else{\n                        body.scrollTop -= 2;\n                    }\n                    if(step >= Math.abs(deltaY)){\n                        clearInterval(timeId);\n                    }\n                }, 5);\n            },\n            handleMouseWheel (event) {\n                const deltaX = event.deltaX;\n                const $body = this.$refs.body;\n\n                if (deltaX > 0) {\n                    $body.scrollLeft = $body.scrollLeft + 10;\n                } else {\n                    $body.scrollLeft = $body.scrollLeft - 10;\n                }\n            },\n            sortData (data, type, index) {\n                const key = this.cloneColumns[index].key;\n                data.sort((a, b) => {\n                    if (this.cloneColumns[index].sortMethod) {\n                        return this.cloneColumns[index].sortMethod(a[key], b[key], type);\n                    } else {\n                        if (type === 'asc') {\n                            return a[key] > b[key] ? 1 : -1;\n                        } else if (type === 'desc') {\n                            return a[key] < b[key] ? 1 : -1;\n                        }\n                    }\n                });\n                for (let i = 0; i < data.length; i++) {\n                    if (data[i].children && data[i].children.length) {\n                        data[i].children = this.sortData(data[i].children, type, index);\n                    }\n                }\n                return data;\n            },\n            handleSort (_index, type) {\n                const index = this.GetOriginalIndex(_index);\n                this.cloneColumns.forEach((col) => col._sortType = 'normal');\n\n                const key = this.cloneColumns[index].key;\n                if (this.cloneColumns[index].sortable !== 'custom') {    // custom is for remote sort\n                    if (type === 'normal') {\n                        this.rebuildData = this.makeDataWithFilter();\n                    } else {\n                        this.rebuildData = this.sortData(this.rebuildData, type, index);\n                    }\n                }\n                this.cloneColumns[index]._sortType = type;\n\n                this.$emit('on-sort-change', {\n                    column: JSON.parse(JSON.stringify(this.allColumns[this.cloneColumns[index]._index])),\n                    key: key,\n                    order: type\n                });\n            },\n            handleFilterHide (index) {    // clear checked that not filter now\n                if (!this.cloneColumns[index]._isFiltered) this.cloneColumns[index]._filterChecked = [];\n            },\n            filterData (data, column) {\n                return data.filter((row) => {\n                    //如果定义了远程过滤方法则忽略此方法\n                    if (typeof column.filterRemote === 'function') return true;\n\n                    let status = !column._filterChecked.length;\n                    for (let i = 0; i < column._filterChecked.length; i++) {\n                        status = column.filterMethod(column._filterChecked[i], row);\n                        if (status) break;\n                    }\n                    return status;\n                });\n            },\n            filterOtherData (data, index) {\n                let column = this.cloneColumns[index];\n                if (typeof column.filterRemote === 'function') {\n                    column.filterRemote.call(this.$parent, column._filterChecked, column.key, column);\n                }\n\n                this.cloneColumns.forEach((col, colIndex) => {\n                    if (colIndex !== index) {\n                        data = this.filterData(data, col);\n                    }\n                });\n                return data;\n            },\n            handleFilter (index) {\n                const column = this.cloneColumns[index];\n                let filterData = this.makeDataWithSort();\n\n                // filter others first, after filter this column\n                filterData = this.filterOtherData(filterData, index);\n                this.rebuildData = this.filterData(filterData, column);\n\n                this.cloneColumns[index]._isFiltered = true;\n                this.cloneColumns[index]._filterVisible = false;\n                this.$emit('on-filter-change', column);\n            },\n            /**\n             * #2832\n             * 应该区分当前表头的 column 是左固定还是右固定\n             * 否则执行到 $parent 时，方法的 index 与 cloneColumns 的 index 是不对应的\n             * 左固定和右固定，要区分对待\n             * 所以，此方法用来获取正确的 index\n             * */\n            GetOriginalIndex (_index) {\n                return this.cloneColumns.findIndex(item => item._index === _index);\n            },\n            handleFilterSelect (_index, value) {\n                const index = this.GetOriginalIndex(_index);\n                this.cloneColumns[index]._filterChecked = [value];\n                this.handleFilter(index);\n            },\n            handleFilterReset (_index) {\n                const index = this.GetOriginalIndex(_index);\n                this.cloneColumns[index]._isFiltered = false;\n                this.cloneColumns[index]._filterVisible = false;\n                this.cloneColumns[index]._filterChecked = [];\n\n                let filterData = this.makeDataWithSort();\n                filterData = this.filterOtherData(filterData, index);\n                this.rebuildData = filterData;\n                this.$emit('on-filter-change', this.cloneColumns[index]);\n            },\n            makeData () {\n                let data = deepCopy(this.data);\n                data.forEach((row, index) => {\n                    row._index = index;\n                    row._rowKey = (typeof this.rowKey) === 'string' ? row[this.rowKey] : rowKey++;\n                    if (row.children && row.children.length) {\n                        row.children = this.makeChildrenData(row);\n                    }\n                });\n                return data;\n            },\n            makeChildrenData (data) {\n                if (data.children && data.children.length) {\n                    return data.children.map((row, index) => {\n                        const newRow = deepCopy(row);\n                        newRow._index = index;\n                        newRow._rowKey = (typeof this.rowKey) === 'string' ? newRow[this.rowKey] : rowKey++;\n                        if (newRow.children && newRow.children.length) {\n                            newRow.children = this.makeChildrenData(newRow);\n                        }\n                        return newRow;\n                    });\n                } else {\n                    return data;\n                }\n            },\n            makeDataWithSort () {\n                let data = this.makeData();\n                let sortType = 'normal';\n                let sortIndex = -1;\n                let isCustom = false;\n\n                for (let i = 0; i < this.cloneColumns.length; i++) {\n                    if (this.cloneColumns[i]._sortType !== 'normal') {\n                        sortType = this.cloneColumns[i]._sortType;\n                        sortIndex = i;\n                        isCustom = this.cloneColumns[i].sortable === 'custom';\n                        break;\n                    }\n                }\n                if (sortType !== 'normal' && !isCustom) data =  this.sortData(data, sortType, sortIndex);\n                return data;\n            },\n            makeDataWithFilter () {\n                let data = this.makeData();\n                this.cloneColumns.forEach(col => data = this.filterData(data, col));\n                return data;\n            },\n            makeDataWithSortAndFilter () {\n                let data = this.makeDataWithSort();\n                this.cloneColumns.forEach(col => data = this.filterData(data, col));\n                return data;\n            },\n            makeObjBaseData (row) {\n                const newRow = deepCopy(row);\n                if ((typeof this.rowKey) === 'string') {\n                    newRow._rowKey = newRow[this.rowKey];\n                }\n                newRow._isHover = false;\n                if (newRow._disabled) {\n                    newRow._isDisabled = newRow._disabled;\n                } else {\n                    newRow._isDisabled = false;\n                }\n                if (newRow._checked) {\n                    newRow._isChecked = newRow._checked;\n                } else {\n                    newRow._isChecked = false;\n                }\n                if (newRow._expanded) {\n                    newRow._isExpanded = newRow._expanded;\n                } else {\n                    newRow._isExpanded = false;\n                }\n                if (newRow._highlight) {\n                    newRow._isHighlight = newRow._highlight;\n                } else {\n                    newRow._isHighlight = false;\n                }\n                return newRow;\n            },\n            makeObjData () {\n                let data = {};\n                this.data.forEach((row, index) => {\n                    const newRow = this.makeObjBaseData(row);\n                    if (newRow.children && newRow.children.length) {\n                        if (newRow._showChildren) {\n                            newRow._isShowChildren = newRow._showChildren;\n                        } else {\n                            newRow._isShowChildren = false;\n                        }\n                        newRow.children = this.makeChildrenObjData(newRow);\n                    }\n                    // else if ('_loading' in newRow && newRow.children && newRow.children.length === 0) {\n                    //     newRow._isShowChildren = false;\n                    // }\n                    data[index] = newRow;\n                });\n                return data;\n            },\n            makeChildrenObjData (data) {\n                if (data.children && data.children.length) {\n                    return data.children.map(row => {\n                        const newRow = this.makeObjBaseData(row);\n                        if (newRow._showChildren) {\n                            newRow._isShowChildren = newRow._showChildren;\n                        } else {\n                            newRow._isShowChildren = false;\n                        }\n                        if (newRow.children && newRow.children.length) {\n                            newRow.children = this.makeChildrenObjData(newRow);\n                        }\n                        return newRow;\n                    });\n                } else {\n                    return data;\n                }\n            },\n            // 修改列，设置一个隐藏的 id，便于后面的多级表头寻找对应的列，否则找不到\n            makeColumnsId (columns) {\n                return columns.map(item => {\n                    if ('children' in item) this.makeColumnsId(item.children);\n                    item.__id = getRandomStr(6);\n                    return item;\n                });\n            },\n            makeColumns (cols) {\n                // 在 data 时，this.allColumns 暂时为 undefined\n                let columns = deepCopy(getAllColumns(cols));\n                let left = [];\n                let right = [];\n                let center = [];\n\n                columns.forEach((column, index) => {\n                    column._index = index;\n                    column._columnKey = columnKey++;\n                    column.width = parseInt(column.width);\n                    column._width = column.width ? column.width : '';    // update in handleResize()\n                    column._sortType = 'normal';\n                    column._filterVisible = false;\n                    column._isFiltered = false;\n                    column._filterChecked = [];\n\n                    if ('filterMultiple' in column) {\n                        column._filterMultiple = column.filterMultiple;\n                    } else {\n                        column._filterMultiple = true;\n                    }\n                    if ('filteredValue' in column) {\n                        column._filterChecked = column.filteredValue;\n                        column._isFiltered = true;\n                    }\n\n                    if ('sortType' in column) {\n                        column._sortType = column.sortType;\n                    }\n\n                    if (column.fixed && column.fixed === 'left') {\n                        left.push(column);\n                    } else if (column.fixed && column.fixed === 'right') {\n                        right.push(column);\n                    } else {\n                        center.push(column);\n                    }\n                });\n                return left.concat(center).concat(right);\n            },\n            // create a multiple table-head\n            makeColumnRows (fixedType, cols) {\n                return convertToRows(cols, fixedType);\n            },\n            exportCsv (params) {\n                if (params.filename) {\n                    if (params.filename.indexOf('.csv') === -1) {\n                        params.filename += '.csv';\n                    }\n                } else {\n                    params.filename = 'table.csv';\n                }\n\n                let columns = [];\n                let datas = [];\n                if (params.columns && params.data) {\n                    columns = params.columns;\n                    datas = params.data;\n                } else {\n                    columns = this.allColumns;\n                    if (!('original' in params)) params.original = true;\n                    datas = params.original ? this.data : this.rebuildData;\n                }\n\n                let noHeader = false;\n                if ('noHeader' in params) noHeader = params.noHeader;\n\n                const data = Csv(columns, datas, params, noHeader);\n                if (params.callback) params.callback(data);\n                else ExportCsv.download(params.filename, data);\n            },\n            dragAndDrop(a,b) {\n                this.$emit('on-drag-drop', a,b);\n            },\n            handleClickContextMenuOutside () {\n                this.contextMenuVisible = false;\n            }\n        },\n        created () {\n            if (!this.context) this.currentContext = this.$parent;\n            this.showSlotHeader = this.$slots.header !== undefined;\n            this.showSlotFooter = this.$slots.footer !== undefined;\n            this.rebuildData = this.makeDataWithSortAndFilter();\n        },\n        mounted () {\n            this.handleResize();\n            this.$nextTick(() => this.ready = true);\n\n            on(window, 'resize', this.handleResize);\n            this.observer = elementResizeDetectorMaker();\n            this.observer.listenTo(this.$el, this.handleResize);\n\n            this.$on('on-visible-change', (val) => {\n                if (val) {\n                    this.$nextTick(() => {\n                        this.handleResize();\n                    });\n                }\n            });\n        },\n        beforeDestroy () {\n            this.$off('on-visible-change');\n            off(window, 'resize', this.handleResize);\n            this.observer.removeAllListeners(this.$el);\n            this.observer.uninstall(this.$el);\n            this.observer = null;\n        },\n        watch: {\n            data: {\n                handler () {\n                    const oldDataLen = this.rebuildData.length;\n                    this.objData = this.makeObjData();\n                    this.rebuildData = this.makeDataWithSortAndFilter();\n                    this.handleResize();\n                    if (!oldDataLen) {\n                        this.fixedHeader();\n                    }\n                    // here will trigger before clickCurrentRow, so use async\n                    setTimeout(() => {\n                        this.cloneData = deepCopy(this.data);\n                    }, 0);\n                },\n                deep: true\n            },\n            columns: {\n                handler () {\n                    // todo 这里有性能问题，可能是左右固定计算属性影响的\n                    const colsWithId = this.makeColumnsId(this.columns);\n                    this.allColumns = getAllColumns(colsWithId);\n                    this.cloneColumns = this.makeColumns(colsWithId);\n\n                    this.columnRows = this.makeColumnRows(false, colsWithId);\n                    this.leftFixedColumnRows = this.makeColumnRows('left', colsWithId);\n                    this.rightFixedColumnRows = this.makeColumnRows('right', colsWithId);\n                    this.rebuildData = this.makeDataWithSortAndFilter();\n                    this.handleResize();\n                },\n                deep: true\n            },\n            height () {\n                this.handleResize();\n            },\n            maxHeight () {\n                this.handleResize();\n            },\n            showHorizontalScrollBar () {\n                this.handleResize();\n            },\n            showVerticalScrollBar () {\n                this.handleResize();\n            }\n        }\n    };\n</script>\n"]}]}